extend type Query {
    quizzesByStageKey(chapterId: ID!, stageNumber: Int!): [QuizByStageNumberDto!]!
    quizByStageKeyAndType(chapterId: ID!, stageNumber: Int!, quizType: QuizType!): [QuizUnionDto!]!
    allQuizzesInChapter(chapterId: ID!): QuizByChapterIdDto
    quizzesInChapterByType(chapterId: ID!, quizType: QuizType!): [QuizUnionDto!]!
}

type QuizByChapterIdDto {
    chapterId: ID!
    quizzes: [QuizByStageNumberDto!]!
}

type QuizByStageNumberDto {
    stageId: ID!
    stageName: String!
    stageNumber: Int!
    quizzes: [QuizSetDto!]!
}

type QuizSetDto {
    quizMeaning: QuizMeaningDto!
    quizCard: QuizCardDto!
    quizOX: QuizOXDto!
    quizBlank: QuizBlankDto!
}

type QuizMeaningDto {
    word: String!
    meaning: String!
    exampleSentence: String!
}

type QuizCardDto {
    meaning: String!
    choices: String! # JSON string
    correctWord: String!
}

type QuizOXDto {
    word: String!
    meaning: String!
    isCorrect: Boolean!
}

type QuizBlankDto {
    sentenceWithBlank: String!
    correctWord: String!
}

union QuizUnionDto = QuizMeaningDto | QuizCardDto | QuizOXDto | QuizBlankDto
